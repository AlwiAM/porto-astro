---
// Chatbot component with RAG-based responses
---

<div id="chatbot-container">
  <button id="chatbot-toggle" class="chatbot-toggle">
    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
    </svg>
  </button>

  <div id="chatbot-window" class="chatbot-window hidden">
    <div class="chatbot-header">
      <h3>ðŸ’¬ Ask about Adam</h3>
      <div class="header-actions">
        <button id="clear-history" class="clear-btn" title="Clear chat history">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="3 6 5 6 21 6"></polyline>
            <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
          </svg>
        </button>
        <button id="chatbot-close" class="chatbot-close">Ã—</button>
      </div>
    </div>

    <div id="chatbot-messages" class="chatbot-messages">
      <div class="message bot-message">
        <p>Hi! I'm Adam's AI assistant. Ask me anything about his background, skills, projects, or experience! ðŸ˜Š</p>
      </div>
    </div>

    <form id="chatbot-form" class="chatbot-input">
      <input
        type="text"
        id="chatbot-input"
        placeholder="Ask about Adam's experience, skills, projects..."
        autocomplete="off"
      />
      <button type="submit" id="send-btn">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="22" y1="2" x2="11" y2="13"></line>
          <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
        </svg>
      </button>
    </form>
  </div>
</div>

<style>
  #chatbot-container {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    z-index: 1001;
  }

  .chatbot-toggle {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--primary), var(--secondary));
    border: none;
    color: white;
    cursor: pointer;
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .chatbot-toggle:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 20px rgba(59, 130, 246, 0.6);
  }

  .chatbot-window {
    position: absolute;
    bottom: 80px;
    right: 0;
    width: 380px;
    height: 500px;
    background: white;
    border-radius: 16px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    transition: all 0.3s ease;
  }

  .chatbot-window.hidden {
    opacity: 0;
    visibility: hidden;
    transform: translateY(20px);
  }

  .chatbot-header {
    background: linear-gradient(135deg, var(--primary), var(--secondary));
    color: white;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .chatbot-header h3 {
    margin: 0;
    font-size: 1.1rem;
  }

  .header-actions {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .clear-btn,
  .chatbot-close {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    transition: background 0.2s;
    padding: 0.25rem;
  }

  .clear-btn {
    width: 28px;
    height: 28px;
  }

  .chatbot-close {
    font-size: 1.5rem;
    width: 30px;
    height: 30px;
  }

  .clear-btn:hover,
  .chatbot-close:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .chatbot-messages {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    background: #f9fafb;
  }

  .message {
    max-width: 80%;
    padding: 0.75rem 1rem;
    border-radius: 12px;
    animation: slideIn 0.3s ease;
  }

  .bot-message {
    background: white;
    align-self: flex-start;
    border: 1px solid #e5e7eb;
  }

  .user-message {
    background: linear-gradient(135deg, var(--primary), var(--secondary));
    color: white;
    align-self: flex-end;
  }

  .message p {
    margin: 0;
    line-height: 1.5;
    font-size: 0.9rem;
  }

  .typing-indicator {
    display: flex;
    gap: 4px;
    padding: 0.75rem 1rem;
  }

  .typing-indicator span {
    width: 8px;
    height: 8px;
    background: var(--primary);
    border-radius: 50%;
    animation: typing 1.4s infinite;
  }

  .typing-indicator span:nth-child(2) {
    animation-delay: 0.2s;
  }

  .typing-indicator span:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes typing {
    0%, 60%, 100% {
      transform: translateY(0);
    }
    30% {
      transform: translateY(-10px);
    }
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .chatbot-input {
    display: flex;
    gap: 0.5rem;
    padding: 1rem;
    background: white;
    border-top: 1px solid #e5e7eb;
  }

  .chatbot-input input {
    flex: 1;
    padding: 0.75rem;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    font-size: 0.9rem;
    font-family: inherit;
  }

  .chatbot-input input:focus {
    outline: none;
    border-color: var(--primary);
  }

  .chatbot-input button {
    padding: 0.75rem;
    background: var(--primary);
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: background 0.3s;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .chatbot-input button:hover {
    background: var(--primary-dark);
  }

  .chatbot-input button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  @media (max-width: 768px) {
    #chatbot-container {
      bottom: 1rem;
      right: 1rem;
    }

    .chatbot-window {
      width: calc(100vw - 2rem);
      max-width: 380px;
    }
  }
</style>

<script>
  import { profileContext } from '../data/context';

  function initChatbot() {
    const toggle = document.getElementById('chatbot-toggle');
    const closeBtn = document.getElementById('chatbot-close');
    const chatWindow = document.getElementById('chatbot-window');
    const form = document.getElementById('chatbot-form') as HTMLFormElement;
    const input = document.getElementById('chatbot-input') as HTMLInputElement;
    const messages = document.getElementById('chatbot-messages');
    const sendBtn = document.getElementById('send-btn') as HTMLButtonElement;

    if (!toggle || !closeBtn || !chatWindow || !form || !input || !messages || !sendBtn) {
      console.error('Chatbot elements not found');
      return;
    }

  // Chat history management
  const CHAT_HISTORY_KEY = 'adam_portfolio_chat_history';
  const MAX_HISTORY = 50; // Keep last 50 messages

  interface ChatMessage {
    content: string;
    isUser: boolean;
    timestamp: number;
  }

  // Load chat history from localStorage
  function loadChatHistory(): ChatMessage[] {
    try {
      const saved = localStorage.getItem(CHAT_HISTORY_KEY);
      return saved ? JSON.parse(saved) : [];
    } catch (error) {
      console.error('Error loading chat history:', error);
      return [];
    }
  }

  // Save chat history to localStorage
  function saveChatHistory(history: ChatMessage[]) {
    try {
      // Keep only last MAX_HISTORY messages
      const trimmed = history.slice(-MAX_HISTORY);
      localStorage.setItem(CHAT_HISTORY_KEY, JSON.stringify(trimmed));
    } catch (error) {
      console.error('Error saving chat history:', error);
    }
  }

  // Restore chat history on load
  function restoreChatHistory() {
    const history = loadChatHistory();
    // Clear existing messages except welcome message
    const welcomeMessage = messages?.querySelector('.bot-message:first-child');
    if (messages) {
      messages.innerHTML = '';
      if (welcomeMessage) {
        messages.appendChild(welcomeMessage);
      }
    }

    // Restore messages
    history.forEach(msg => {
      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${msg.isUser ? 'user-message' : 'bot-message'}`;
      const p = document.createElement('p');
      p.textContent = msg.content;
      messageDiv.appendChild(p);
      messages?.appendChild(messageDiv);
    });

    if (messages) {
      messages.scrollTop = messages.scrollHeight;
    }
  }

  // Initialize chat history on load
  restoreChatHistory();

  // Toggle chatbot
  toggle?.addEventListener('click', () => {
    chatWindow?.classList.toggle('hidden');
    if (!chatWindow?.classList.contains('hidden')) {
      input?.focus();
    }
  });

  closeBtn?.addEventListener('click', () => {
    chatWindow?.classList.add('hidden');
  });

  // Clear chat history
  const clearBtn = document.getElementById('clear-history');
  clearBtn?.addEventListener('click', () => {
    if (confirm('Are you sure you want to clear the chat history?')) {
      localStorage.removeItem(CHAT_HISTORY_KEY);
      // Clear messages except welcome
      const welcomeMessage = messages?.querySelector('.bot-message:first-child');
      if (messages) {
        messages.innerHTML = '';
        if (welcomeMessage) {
          messages.appendChild(welcomeMessage);
        }
      }
    }
  });

  // Add message to chat
  function addMessage(content: string, isUser: boolean) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;

    const p = document.createElement('p');
    p.textContent = content;
    messageDiv.appendChild(p);

    messages?.appendChild(messageDiv);
    messages!.scrollTop = messages!.scrollHeight;

    // Save to history
    const history = loadChatHistory();
    history.push({
      content,
      isUser,
      timestamp: Date.now()
    });
    saveChatHistory(history);
  }

  // Show typing indicator
  function showTyping() {
    const typingDiv = document.createElement('div');
    typingDiv.className = 'message bot-message typing-indicator';
    typingDiv.id = 'typing-indicator';
    typingDiv.innerHTML = '<span></span><span></span><span></span>';
    messages?.appendChild(typingDiv);
    messages!.scrollTop = messages!.scrollHeight;
  }

  // Remove typing indicator
  function removeTyping() {
    document.getElementById('typing-indicator')?.remove();
  }

  // Call Groq API - Free and fast
  async function getChatResponse(userMessage: string): Promise<string> {
    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: userMessage,
          context: profileContext
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to get response');
      }

      const data = await response.json();
      return data.message;
    } catch (error) {
      console.error('Chat error:', error);
      return "I apologize, but I'm having trouble connecting right now. Please try again or contact Adam directly at alwiadam1@gmail.com";
    }
  }

  // Handle form submission
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const userMessage = input.value.trim();
    if (!userMessage) return;

    // Add user message
    addMessage(userMessage, true);
    input.value = '';

    // Disable input while processing
    input.disabled = true;
    sendBtn.disabled = true;

    // Show typing indicator
    showTyping();

    // Get bot response
    const botResponse = await getChatResponse(userMessage);

    // Remove typing and add response
    removeTyping();
    addMessage(botResponse, false);

    // Re-enable input
    input.disabled = false;
    sendBtn.disabled = false;
    input.focus();
  });
  }

  // Initialize on DOM ready and after view transitions
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initChatbot);
  } else {
    initChatbot();
  }

  // Re-initialize after Astro view transitions
  document.addEventListener('astro:page-load', initChatbot);
</script>
